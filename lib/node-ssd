#! /usr/bin/env node
console.log('Starting Node');

require = require('esm')(module);

const { launch } = require('./launch-chain');

const ss = require('bindings')('ss.node');
console.log('Have SSD', ss);

const portHandlers = {};
let lastPort = 0;
function registerPortHandler(portHandler) {
  const port = ++lastPort;
  portHandlers[port] = portHandler;
  return port;
}
function fromGo(port, str, replier) {
  const handler = portHandlers[port];
  if (!handler) {
    return replier.reject(`invalid requested port ${port}`);
  }
  const action = JSON.parse(str);
  const p = Promise.resolve(handler(action));
  p.then(res => replier.resolve("success ignored"),
         rej => replier.reject("rejection ignored"));
}

// Actually run the main ssd program.  Before we start the daemon,
// there will be a call to nodePort/SSD_INIT, otherwise exit.
const nodePort = registerPortHandler(toSwingSet);
ss.runSSD(nodePort, fromGo, process.argv.slice(1));

let globalHandler, globalSetStorage;
async function toSwingSet(action, replier) {
  function handlePromise(p) {
    p.then(res => replier.resolve(`success ${res} ignored`),
          rej => replier.reject(`rejection ${res} ignored`));
  }
  if (globalHandler) {
    if (action.storagePort) {
      // FIXME: Initialize the storage for this particular transaction.
      globalSetStorage(makeStorage(action.storagePort));
    }
    const p = Promise.resolve(globalHandler(action));
    handlePromise(p);
  }

  if (action.type !== 'SSD_INIT') {
    return replier.reject(`SSD_INIT must be the first message`);
  }
  const sPort = action.readonlyStoragePort;
  launch().then(({ handler, setStorage }) => {
    globalHandler = handler;
    globalSetStorage = setStorage;
    // Initialize the kernel state by reading the storage.
    setStorage(makeStorage(sPort));
    const p = Promise.resolve(handler({type: 'SDK_READY'}));
    handlePromise(p);
  }, rej => {
    console.log(`launch() failed`, rej);
  });
}

// Generate a storage object for the port.
function makeStorage(sPort) {
  return {
    has(key) {
      return ss.send(sPort, JSON.stringify({method: "has", key}));
    },
    set(key, value) {
      return ss.send(sPort, JSON.stringify({method: "set", key, value}));
    },
    get(key) {
      return ss.send(sPort, JSON.stringify({method: "get", key}));
    },
  };
}
