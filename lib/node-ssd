#! /usr/bin/env node
console.log('Starting Node');

require = require('esm')(module);

const { launch } = require('./launch-chain');

const ss = require('bindings')('ss.node');
console.log('Have SSD', ss);

const portHandlers = {};
let lastPort = 0;
function registerPortHandler(portHandler) {
  const port = ++lastPort;
  portHandlers[port] = portHandler;
  return port;
}
function fromGo(port, str, replier) {
  const handler = portHandlers[port];
  if (!handler) {
    return replier.reject(`invalid requested port ${port}`);
  }
  const action = JSON.parse(str);
  const p = Promise.resolve(handler(action));
  p.then(res => replier.resolve(`${res}`),
         rej => replier.reject(`rejection ${rej} ignored`));
}

// Actually run the main ssd program.  Before we start the daemon,
// there will be a call to nodePort/SSD_INIT, otherwise exit.
const nodePort = registerPortHandler(toSwingSet);
ss.runSSD(nodePort, fromGo, process.argv.slice(1));

let globalHandler, globalSetStorage;
async function toSwingSet(action, replier) {
  if (action.type === 'SSD_INIT') {
    return true;
  }

  // Only start running for DELIVER_INBOUND.
  if (action.type !== 'DELIVER_INBOUND') {
    throw `Unknown action type ${action.type}`;
  }

  if (globalHandler) {
    if (action.storagePort) {
      // Initialize the storage for this particular transaction.
      globalSetStorage(makeStorage(action.storagePort));
    }
    return await globalHandler(action);
  }

  const sPort = action.storagePort;
  const {handler, setStorage} = await launch();
  globalHandler = handler;
  globalSetStorage = setStorage;
  
  // Initialize the kernel state by reading the storage.
  setStorage(makeStorage(sPort));
  console.log('Sending SDK_READY');
  const ret = await handler({type: 'SDK_READY'});
  return await handler(action);
}

// Generate a storage object for the port.
function makeStorage(sPort) {
  return {
    has(key) {
      return ss.send(sPort, JSON.stringify({method: "has", key}));
    },
    set(key, value) {
      return ss.send(sPort, JSON.stringify({method: "set", key, value}));
    },
    get(key) {
      return ss.send(sPort, JSON.stringify({method: "get", key}));
    },
  };
}
